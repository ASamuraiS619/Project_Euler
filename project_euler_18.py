# -*- coding: utf-8 -*-

'''
Problem18 「最大経路の和 その1」

以下の三角形の頂点から下の行の隣接する数字を通って下まで移動するとき, その数値の和の最大値は23になる.

             [3]
          [7]    4
         2   [4]   6
       8   5    [9]  3
この例では 3 + 7 + 4 + 9 = 23.

以下の三角形を頂点から下まで移動するとき, その最大の和を求めよ.

              75
             95 64
            17 47 82
           18 35 87 10
          20 04 82 47 65
         19 01 23 75 03 34
        88 02 77 73 07 63 67
       99 65 04 28 06 16 70 92
      41 41 26 56 83 40 80 70 33
     41 48 72 33 47 32 37 16 94 29
    53 71 44 65 25 43 91 52 97 51 14
   70 11 33 28 77 73 17 78 39 68 17 57
  91 71 52 38 17 14 91 43 58 50 27 29 48
 63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

注: ここではたかだか 16384 通りのルートしかないので, すべてのパターンを試すこともできる. Problem 67 は同じ問題だが100行あるので, 総当りでは解けない. もっと賢い方法が必要である.
'''

import time

pyramid_str = """75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23"""

if __name__ == '__main__':
    start = time.time()

    pyramid = pyramid_str.split('\n')
    # 各行について、スペースで区切りつつ、後の計算のために前後に'0'を入れる。
    pyramid = list(map(lambda x: ['0'] + x.split(' ') + ['0'], pyramid))

    # 下の隣接する2項を比べて大きい方を足し、自分自身をそれとの和に置き換える。
    # これを下から順に行い上まで繰り返せば、求める最大の和が一番上に出てくる。

    for i in range(len(pyramid) - 2, -1, -1):
        for k in range(1, len(pyramid[i]) -1):
            pyramid[i][k] = int(pyramid[i][k]) + max(int(pyramid[i+1][k]), int(pyramid[i+1][k+1]))

    print(pyramid[0][1])    # answer 1074(最小は447)

    elapsed_time = time.time() - start
    print("elapsed_time:{}".format(round(elapsed_time, 5)) + "[sec]")   # 0.00018sec
